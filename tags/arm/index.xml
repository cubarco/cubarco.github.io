<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ARM on /home/cubarco</title><link>https://cubl.in/tags/arm/</link><description>Recent content in ARM on /home/cubarco</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 16 Dec 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://cubl.in/tags/arm/index.xml" rel="self" type="application/rss+xml"/><item><title>Writeup-Pwnable: syscall</title><link>https://cubl.in/2015/12/writeup-pwnable-syscall/</link><pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate><guid>https://cubl.in/2015/12/writeup-pwnable-syscall/</guid><description>// adding a new system call : sys_upper #include &amp;lt;linux/module.h&amp;gt;#include &amp;lt;linux/kernel.h&amp;gt;#include &amp;lt;linux/slab.h&amp;gt;#include &amp;lt;linux/vmalloc.h&amp;gt;#include &amp;lt;linux/mm.h&amp;gt;#include &amp;lt;asm/unistd.h&amp;gt;#include &amp;lt;asm/page.h&amp;gt;#include &amp;lt;linux/syscalls.h&amp;gt; #define SYS_CALL_TABLE 0x8000e348 // manually configure this address!! #define NR_SYS_UNUSED 223 //Pointers to re-mapped writable pages unsigned int** sct; asmlinkage long sys_upper(char *in, char* out){ int len = strlen(in); int i; for(i=0; i&amp;lt;len; i++){ if(in[i]&amp;gt;=0x61 &amp;amp;&amp;amp; in[i]&amp;lt;=0x7a){ out[i] = in[i] - 0x20; } else{ out[i] = in[i]; } } return 0; } static int __init initmodule(void ){ sct = (unsigned int**)SYS_CALL_TABLE; sct[NR_SYS_UNUSED] = sys_upper; printk(&amp;#34;sys_upper(number : 223) is added\n&amp;#34;); return 0; } static void __exit exitmodule(void ){ return; } module_init( initmodule ); module_exit( exitmodule ); 这题就是提供了一个可以write-anything-anywhere的系统调用(也不算anything，有点限制)，系统调用的地址存在0x8000e348+223 = 0x8000e6c4, flag在/root/flag.</description></item></channel></rss>